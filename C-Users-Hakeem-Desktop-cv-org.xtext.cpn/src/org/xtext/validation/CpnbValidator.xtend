/*
 * generated by Xtext 2.10.0
 */
package org.xtext.validation

import java.util.List
import org.eclipse.xtext.validation.Check
import org.xtext.cpnb.Containement
import org.xtext.cpnb.CpnbPackage
import org.xtext.cpnb.Guarddef
import org.xtext.cpnb.Model
import org.xtext.cpnb.Opr
import org.xtext.cpnb.Placedec
import org.xtext.cpnb.Transitiondeclation
import org.xtext.cpnb.inialisation
import java.util.ArrayList

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class CpnbValidator extends AbstractCpnbValidator {
	
//	public static val INVALID_NAME = 'invalidName'
//
//	@Check
//	def checkGreetingStartsWithCapital(Greeting greeting) {
//		if (!Character.isUpperCase(greeting.name.charAt(0))) {
//			warning('Name should start with a capital', 
//					CpnbPackage.Literals.GREETING__NAME,
//					INVALID_NAME)
//		}
//	}
 @Check  def checkPladecAreUnique(Placedec placedef){
 	var i =0
  for(c:   ( placedef.eContainer() as Model).getPlacesDeclaration){
  if (c.name == placedef.name){
  i +=1
    }}
  if(i>1){
  	 warning("A Place name should be unique",
           CpnbPackage::eINSTANCE.placedec_Name)
             }
     }
  
  @Check  def checkTransitionsAreUnique(Transitiondeclation tr){
 	var i =0
  for(c:   ( tr.eContainer() as Model).getTrasitionsDeclaration){
  if (c.getName == tr.getName){
  i +=1
 
  }}
  if(i>1){
  	 warning("A Transition name should be unique",
           CpnbPackage::eINSTANCE.transitiondeclation_Name)
  }
  }
  @Check def checkPlaceintransitioncontainement(Containement con){
  	var i =0
  	var state = con.getState
  	var tr = (con.eContainer() as Guarddef).getTr
  	for(c:   ( con.eContainer.eContainer() as Model).getTrasitionsDeclaration){
  	if (c.name == tr.name){
  		if(c.getInputs.contains(state)){
  		
  		i = 1
  		}
  	}}
  	if (i == 0){warning("state doen't belong to the inputs of this transition",
           CpnbPackage::eINSTANCE.containement_State)
  		}
    }
    @Check def checkplaceintransitionOpr(Opr op){
    	var i =0
    	var state = op.getStates.get(0)
    	var tr = (op.eContainer() as Guarddef).getTr
    	for(c:    ( op.eContainer.eContainer() as Model).getTrasitionsDeclaration){
    		if (c.name== tr.name){
    	if( c.getInputs.contains(state))
  		i = 1
  		if (c.getOutputs.contains(state))
  		i = 1
  		}	}
    	
    	if (i == 0){warning("state doen't belong neither to output nor to input of this transition",
           CpnbPackage::eINSTANCE.opr_States)
  		} 	
    }
    
    @Check def checkplaceintransitionOprUN(Opr op){
    	var state= op.states.get(0)
    	if (op.states.get(1)!=null && op.states.get(1)!= state)
    	warning("Operation are defined only for one place and connot take the state of another place as their value",
           CpnbPackage::eINSTANCE.opr_States)
    	
    }
   /*  @Check def checkInputsinConOfGard(Guarddef gard){
    	var Trans = gard.getTr
    	var inputs = Trans.getInputs
    	var check =1
    	var i =1
    	var a = 1
    	//var List<Placedec> uu
    	
       // for(c: gard.ifs){ uu.add(c.state)}
        for (states: inputs){
        	  for (c: gard.ifs){
        	  if(c.state.name == states.name && a== check)
        	  i+=1
        	  a+=1
        	  //check = 1
        	  
        	}
        	check += 1
        	}
        	if (i!=check)
        	warning("waar3state doen't belong neither to putput not input of tr",
           CpnbPackage::eINSTANCE.guarddef_Ifs)
        
    	
    }*/
   @Check def checkInputsOutinOprOfGard(Guarddef gard){
   	val Trans = gard.getTr
    val inputs = Trans.getInputs
   	val outputs =  Trans.getOutputs
   	var List<String> uu = new ArrayList<String>
   	for (c:gard.thens){uu.add(c.states.get(0).name)}
   	for (states: inputs){
        	if(!uu.contains(states.name))
        	warning("input state "+states.name+" isn't present",
           CpnbPackage::eINSTANCE.guarddef_Thens)
        }
    	
    for (states: outputs){
        	if(!uu.contains(states.name))
        	warning("output state "+states.name+" isn't present",
           CpnbPackage::eINSTANCE.guarddef_Thens)
        }
    	
   	
     	
     }  
      @Check def checkoperationinguard(Opr op){
      	var state = op.getStates.get(0)
    	var tr = (op.eContainer() as Guarddef).getTr
    	for(c:    ( op.eContainer.eContainer() as Model).getTrasitionsDeclaration){
      	if (c.name== tr.name){
      		if( c.getInputs.contains(state) && !c.getOutputs.contains(state) && op.op=='\\/')
      		warning("Operation '\\/' on this state is not possible, it doens belong to the output of this transition",
           CpnbPackage::eINSTANCE.opr_Op)
           if(c.getOutputs.contains(state) && !c.getInputs.contains(state) && op.op=='\\')
           warning("Operation '\\' on this state is not possible, it doens belong to the output of this transition",
           CpnbPackage::eINSTANCE.opr_Op)
      	}
      }
      }
       
       @Check def ColorinplaceForintialisation(inialisation init){
       	var place = init.getPl
       	if(place!=null){
       	for(dec: (init.eContainer() as Model).placesDeclaration){
       		if (dec.name == place.name){
       			var colors= dec.getColors
       			for (c: init.elements){
       				if (!colors.contains(c.getColr))
       				warning("color "+c.getColr+" doesn't belong to the colors of the subject place",
           CpnbPackage::eINSTANCE.getinialisation_Elements)
       				
       			}
       		}
       	}
       	
       	}
       }
        @Check  def ColorInPlaceForOpr(Opr op){
       	var place = op.getStates.get(0)
       	for(dec:    ( op.eContainer.eContainer() as Model).placesDeclaration){
       		if ( dec.name == place.name){
       			var colors= dec.getColors
       			for(c: op.elements)
       			if (!colors.contains(c.getColr))
       			warning("color "+c.getColr+" doesn't belong to the colors of the subject place",
           CpnbPackage::eINSTANCE.opr_Elements)
       			
       		}
       		
       	}
       	
       		
       		
       	
       	
       }
      
        @Check def ColorInPlaceForContainement(Containement con){
        	var place = con.getState
        		for(dec:    ( con.eContainer.eContainer() as Model).placesDeclaration){
       		if ( dec.name == place.name){
       			var colors= dec.getColors
       			for(c: con.elements)
       			if (!colors.contains(c.getColr))
       			warning("this color doesn't belong to the colors of the subject place",
           CpnbPackage::eINSTANCE.containement_Elements)
       			
       		}
       		
       	}
       	}
       	  @Check def checkOperationInContainement(Containement con){
       	  	if(con.elements.size >1 && con.op == ':')
       	  	warning("you must use the operation'<:' for containement of more than one element",
           CpnbPackage::eINSTANCE.opr_Op)
           if(con.elements.size == 1 && con.op == '<:')
           warning("operation '<:' is not alowed for containement of just one element",
           CpnbPackage::eINSTANCE.containement_Op)
           
           
       	  	
       	}
        	
        }
       
      
      
 
